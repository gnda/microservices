version: "3.8"
services:

# Adminer to manage databases

  adminer:
    image: adminer:latest
    ports:
      - 8080:8080
    networks:
      - db

# Front microservice

  web_back:
    build:
      context:  ./docker/front/
      dockerfile: Dockerfile.node
    entrypoint:
      sh -c "ln -sf /install/node_modules node_modules &&
      ln -sf /install/package.json package.json &&
      ln -sf /install/package-lock.json package-lock.json &&
      npm run build:tailwind &&
      ng serve --host 0.0.0.0 --port 5000 --disableHostCheck"
    volumes:
      - ./volumes/front:/usr/src/app
    working_dir: /usr/src/app
    networks:
      - web

  web_proxy:
    build:
      context:  ./docker/front/
      dockerfile: Dockerfile.nginx
    depends_on:
      - web_back
    volumes:
      - /etc/localtime:/etc/localtime:ro
    ports:
      - 80:80
      - 443:443
    networks:
      - web
      - authentication
      - cart
      - inventory
      - order
      - search

# Authentication microservice

  authentication_back:
    build:
      context: ./docker/back/
      dockerfile: Dockerfile.python
    depends_on:
      - authentication_db
    entrypoint: "python -m flask run --host=0.0.0.0 --port=8000"
    env_file:
      - '.env/db.env'
      - '.env/authentication.env'
    volumes:
      - ${PWD}/volumes/back/authentication:/opt/app
      - /etc/localtime:/etc/localtime:ro
    working_dir: /opt/app
    networks:
      - authentication

  authentication_db:
    image: mysql:8
    env_file:
      - '.env/db.env'
      - '.env/authentication.env'
    volumes:
      - ${PWD}/volumes/db/authentication_data:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
    networks:
      - db
      - authentication

# Inventory microservice

  inventory_back:
    build:
      context: ./docker/back/
      dockerfile: Dockerfile.python
    depends_on:
      - inventory_db
    entrypoint: "python -m flask run --host=0.0.0.0 --port=8000"
    env_file:
      - '.env/db.env'
      - '.env/inventory.env'
    volumes:
      - ${PWD}/volumes/back/inventory:/opt/app
      - /etc/localtime:/etc/localtime:ro
    working_dir: /opt/app
    networks:
      - inventory

  inventory_db:
    image: mysql:8
    env_file:
      - '.env/db.env'
      - '.env/inventory.env'
    volumes:
      - ${PWD}/volumes/db/inventory_data:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
    networks:
      - db
      - inventory

# Order microservice

  order_back:
    build:
      context: ./docker/back/
      dockerfile: Dockerfile.python
    depends_on:
      - order_db
    entrypoint: "python -m flask run --host=0.0.0.0 --port=8000"
    env_file:
      - '.env/db.env'
      - '.env/order.env'
    volumes:
      - ${PWD}/volumes/back/order:/opt/app
      - /etc/localtime:/etc/localtime:ro
    working_dir: /opt/app
    networks:
      - order
      - inventory

  order_db:
    image: mysql:8
    env_file:
      - '.env/db.env'
      - '.env/order.env'
    volumes:
      - ${PWD}/volumes/db/order_data:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
    networks:
      - db
      - order

# Cart microservice

  cart_back:
    build:
      context: ./docker/back/
      dockerfile: Dockerfile.python
    depends_on:
      - cart_db
    entrypoint: "python -m flask run --host=0.0.0.0 --port=8000"
    env_file:
      - '.env/db.env'
      - '.env/cart.env'
    volumes:
      - ${PWD}/volumes/back/cart:/opt/app
      - /etc/localtime:/etc/localtime:ro
    working_dir: /opt/app
    networks:
      - cart
      - inventory

  cart_db:
    image: mysql:8
    env_file:
      - '.env/db.env'
      - '.env/cart.env'
    volumes:
      - ${PWD}/volumes/db/cart_data:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
    networks:
      - db
      - cart

# Search microservice

  search_back:
    build:
      context: ./docker/back/
      dockerfile: Dockerfile.python
    depends_on:
      - search_db
    entrypoint: "python -m flask run --host=0.0.0.0 --port=8000"
    env_file:
      - '.env/db.env'
      - '.env/search.env'
    volumes:
      - ${PWD}/volumes/back/search:/opt/app
      - /etc/localtime:/etc/localtime:ro
    working_dir: /opt/app
    networks:
      - search
      - inventory

  search_db:
    image: mysql:8
    env_file:
      - '.env/db.env'
      - '.env/search.env'
    volumes:
      - ${PWD}/volumes/db/search_data:/var/lib/mysql
      - /etc/localtime:/etc/localtime:ro
    networks:
      - db
      - search

networks:
  db:
    name: db
  authentication:
    name: authentication
  cart:
    name: cart
  inventory:
    name: inventory
  order:
    name: order
  search:
    name: search
  web:
    name: web